The CLUBBStandardsCheck.pl perl script can be used to check Fortran 
source files to determine if they follow certain good software engineering 
practices which are meant to be enforced for CLUBB source files. This 
script was written by Joshua Fasching.

The differences_binary_casefiles.sh bash script can be used to quickly check
two folders containing GrADS files for binary differences.

make_nc_grads_readable.m takes most NetCDF files that GrADS can not open
for whatever reason (usually "no discernable x coordinate") and converts
them to a NetCDF file GrADS can open. The resulting file will be close to
COARDS convention. The to_convert and new_file variables will need to be
adjusted for your own use. It takes around an hour to convert most NetCDF
files.

check_for_missing_threadprivate.py checks whether a module variable 
in CLUBB or SILHS has been declared but not designated as a threadprivate.
In such a case, the variables are not thread safe and different threads
may store a variable in the same memory location, causing errors.
In particular, such an omission may cause CAM-CLUBB-SILHS to produce 
different results when different numbers of openmp threads are selected.

check_for_errors.py checks CLUBB source code files for common mistakes or
CLUBB standards violations. It checks for uninitialized output variables,
magic flags, and magic numbers. An output variable is only initialized if it
is set in every part of an if or select case statement or if it is set outside
of these statements. A magic number is any number that appears
in a subroutine or function call or appears in an equation on the right-hand
side of an equals sign. Integers from -6 to +6 are not considered magic numbers,
and nothing in an if statement is considered a magic number. If the argument -w
or --show-warnings is provided, warnings will be printed when a variable is set
by a subroutine or function call. If no files are provided in the argument list,
the script will check all files in the src, Benchmark_cases, CLUBB_core,
KK_microphys, and Latin_hypercube directories.
USAGE: "python check_for_errors.py [-w or --show-warnings] <filename>.F90"

check_division.py checks CLUBB source code files for any division that could
potentially result in a divide-by-zero or divide-by-small-number error. It will
simply print out any line that contains a division symbol after an equals sign,
omitting any division that has a max() or has only a constant value in the
denominator. If no arguments are proficed, the script will check all files in
the src, Benchmark_cases, CLUBB_core, KK_microphys, and Latin_hypercube directories.
USAGE: "python check_division.py <filename>.F90"

print_tunable_parameters_table.py prints out a table of the tunable parameters
with their values in markdown format. The output can be copied and pasted directly
into a github comment and will be formatted as a table there. If multiple files
are listed as arguments, then the output will have a column for each file listing
the values of the parameters if they are present or an indicator if commented out.
USAGE: "python print_tunable_parameters_table.py [options] 
               <list of tunable_parameters.in files>"
